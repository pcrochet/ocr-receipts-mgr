# backend/ocr/migrations/0002_initial.py
# Generated by Django 5.2.5 on 2025-08-12 14:47

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ocr', '0001_create_schema'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('aliases', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Variantes/alias détectés (OCR).', size=None)),
                ('website', models.URLField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'brands',
                'indexes': [models.Index(django.db.models.functions.text.Lower('name'), name='ix_brand_name_ci')],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='uq_brand_name_ci')],
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('collected', 'Collected'), ('ingested', 'Ingested'), ('ocr_done', 'OCR done'), ('vectorized', 'Vectorized'), ('brand_store_identified', 'Brand/Store identified')], db_index=True, default='collected', max_length=32)),
                ('content_hash', models.CharField(help_text='SHA-256 du binaire source.', max_length=64, unique=True)),
                ('source_path', models.CharField(help_text='Ex: incoming/2025-08-12/IMG_1234.jpg', max_length=512)),
                ('quarantine_path', models.CharField(blank=True, max_length=512)),
                ('ocr_txt_path', models.CharField(blank=True, max_length=512)),
                ('ocr_json_path', models.CharField(blank=True, max_length=512)),
                ('original_filename', models.CharField(max_length=255)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('size_bytes', models.BigIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('purchase_date', models.DateField(blank=True, db_index=True, null=True)),
                ('currency', models.CharField(default='EUR', max_length=3)),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('store_name_raw', models.CharField(blank=True, help_text='Texte brut (OCR) avant mapping.', max_length=255)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='receipts', to='ocr.brand')),
            ],
            options={
                'db_table': 'receipts',
            },
        ),
        migrations.CreateModel(
            name='ReceiptLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_no', models.PositiveIntegerField(help_text='Position/numéro de ligne dans le ticket.')),
                ('description', models.CharField(max_length=512)),
                ('quantity', models.DecimalField(decimal_places=3, default=Decimal('1'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(blank=True, help_text='ex: x125g, 500g, L, kg, unité…', max_length=32)),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('line_total', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('vat_rate', models.DecimalField(blank=True, decimal_places=2, help_text='ex: 5.50 pour 5,5%', max_digits=5, null=True)),
                ('brand_text', models.CharField(blank=True, help_text='Marque brute si détectée.', max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receipt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='ocr.receipt')),
            ],
            options={
                'db_table': 'receipts_lines',
            },
        ),
        migrations.CreateModel(
            name='ProcessingEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.CharField(choices=[('collect_from_gmail', 'Collect from Gmail'), ('collect_from_dir', 'Collect from directory'), ('compute_ocr', 'Compute OCR'), ('vectorize_receipts', 'Vectorize receipts'), ('guess_brand', 'Guess brand')], max_length=32)),
                ('status', models.CharField(choices=[('started', 'Started'), ('success', 'Success'), ('error', 'Error')], default='started', max_length=16)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('duration_ms', models.IntegerField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ocr.receipt')),
                ('line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ocr.receiptline')),
            ],
            options={
                'db_table': 'processing_events',
            },
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['state'], name='ix_receipt_state'),
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['purchase_date'], name='ix_receipt_pdate'),
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['brand_id'], name='ix_receipt_brand'),
        ),
        migrations.AddConstraint(
            model_name='receipt',
            constraint=models.CheckConstraint(condition=models.Q(('total_amount__gte', 0), ('total_amount__isnull', True), _connector='OR'), name='ck_receipt_total_ge0'),
        ),
        migrations.AddIndex(
            model_name='receiptline',
            index=models.Index(fields=['receipt', 'line_no'], name='ix_line_receipt_no'),
        ),
        migrations.AddConstraint(
            model_name='receiptline',
            constraint=models.UniqueConstraint(fields=('receipt', 'line_no'), name='uq_receipt_line_no'),
        ),
        migrations.AddConstraint(
            model_name='receiptline',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gte', 0)), name='ck_line_qty_ge0'),
        ),
        migrations.AddConstraint(
            model_name='receiptline',
            constraint=models.CheckConstraint(condition=models.Q(('unit_price__gte', 0), ('unit_price__isnull', True), _connector='OR'), name='ck_line_unit_price_ge0'),
        ),
        migrations.AddConstraint(
            model_name='receiptline',
            constraint=models.CheckConstraint(condition=models.Q(('line_total__gte', 0), ('line_total__isnull', True), _connector='OR'), name='ck_line_total_ge0'),
        ),
        migrations.AddIndex(
            model_name='processingevent',
            index=models.Index(fields=['step', 'status', 'started_at'], name='processing__step_332aa4_idx'),
        ),
        migrations.AddIndex(
            model_name='processingevent',
            index=models.Index(fields=['receipt_id', 'started_at'], name='processing__receipt_cbffb4_idx'),
        ),
    ]
